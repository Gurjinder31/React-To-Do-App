{"version":3,"sources":["ListItems.js","App.js","index.js"],"names":["ListItems","props","itemList","showList","map","items","className","key","type","id","value","text","onChange","e","editList","target","class","onClick","deleteList","duration","easing","App","state","list","contents","handleInput","evt","setState","Date","now","submit","preventDefault","newList","console","log","newLists","FilterList","filter","filt","l","onSubmit","this","placeholder","React","Component","ReactDOM","render","document","getElementById"],"mappings":"yNAyBeA,EArBG,SAACC,GACf,IAAMC,EAAYD,EAAME,SAASC,KAAI,SAAAC,GACpC,OAAO,yBAAKC,UAAU,aAAaC,IAAKF,EAAME,KAChC,2BACE,2BAAOC,KAAK,OAAOC,GAAIJ,EAAME,IAAKG,MAAOL,EAAMM,KAC9CC,SAAU,SAACC,GAAMZ,EAAMa,SAASD,EAAEE,OAAOL,MAAOL,EAAME,SAGzD,8BACM,uBAAGS,MAAM,mBAAmBC,QAAS,kBAAKhB,EAAMiB,WAAWb,EAAME,aAItF,OACI,6BACG,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC/BlB,KCkEGmB,E,4MAhFVC,MAAQ,CACGC,KAAK,GACLC,SAAU,CACRb,KAAM,GACNJ,IAAM,K,EAInBkB,YAAc,SAACC,GACV,EAAKC,SAAS,CACZH,SAAU,CACGb,KAAMe,EAAIX,OAAOL,MACjBH,IAAKqB,KAAKC,U,EAO9BC,OAAS,SAACjB,GACRA,EAAEkB,iBACD,IAAMC,EAAU,EAAKV,MAAME,SAIzB,GAFFS,QAAQC,IAAIF,GAEW,KAAjBA,EAAQrB,KAAa,CACzB,IAAMwB,EAAQ,sBAAO,EAAKb,MAAMC,MAAlB,CAAwBS,IACtC,EAAKL,SAAS,CACZJ,KAAMY,EACNX,SAAU,CACRb,KAAM,GACNJ,IAAK,Q,EAMfW,WAAW,SAACX,GACR,IAAM6B,EAAa,EAAKd,MAAMC,KAAKc,QAAO,SAAAC,GAAI,OAAIA,EAAK/B,MAAMA,KAC3D,EAAKoB,SAAS,CACZJ,KAAMa,K,EAMdtB,SAAU,SAACH,EAAMJ,GACf,IAAM4B,EAAU,EAAKb,MAAMC,KACzBY,EAAS/B,KAAI,SAACmC,GACXA,EAAEhC,MAAMA,IACPgC,EAAE5B,KAAMA,MAGZ,EAAKgB,SAAS,CACZtB,MAAO8B,K,uDAMf,OACE,yBAAK7B,UAAU,OAET,0BAAMkC,SAAUC,KAAKX,OAAQxB,UAAU,kBACvC,yBAAKA,UAAU,iBACb,2BAAOA,UAAU,aAAaE,KAAK,OAASI,SAAU6B,KAAKhB,YAAaf,MAAO+B,KAAKnB,MAAME,SAASb,KAAM+B,YAAY,uBACrH,4BAAQpC,UAAU,MAAOE,KAAK,UAA9B,QAGF,kBAAC,EAAD,CACCL,SAAUsC,KAAKnB,MAAMC,KACrBL,WAAYuB,KAAKvB,WACjBJ,SAAU2B,KAAK3B,iB,GA1ER6B,IAAMC,WCExBC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.54a1c0cd.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './css/style.css';\r\nimport Flipmove from 'react-flip-move';\r\n\r\nconst ListItems = (props) => {\r\n    const itemList =  props.showList.map(items =>{\r\n     return <div className=\"list-items\" key={items.key}>\r\n                   <p>\r\n                     <input type=\"text\" id={items.key} value={items.text}\r\n                      onChange={(e)=> {props.editList(e.target.value, items.key)} }\r\n                     />  \r\n                   </p>\r\n                   <span>\r\n                         <i class=\"fas fa-trash-alt\" onClick={()=> props.deleteList(items.key)}></i>\r\n                   </span>\r\n            </div>\r\n    });\r\n    return (\r\n        <div >\r\n           <Flipmove duration={400} easing=\"ease-in-out\">\r\n           {itemList}  \r\n           </Flipmove>\r\n        </div>\r\n    )\r\n}\r\nexport default ListItems;","import React from 'react';\nimport style from './css/style.css';\nimport ListItems from './ListItems';\n\nclass App extends React.Component {\n   \n     state = {\n                list:[],\n                contents: {\n                  text: '',\n                  key:  '', }\n             }\n     \n            //  added new value in input and it get update state.contents.text by target.value \n     handleInput = (evt)=>{\n          this.setState({\n            contents: {\n                         text: evt.target.value,\n                         key: Date.now()\n                      }\n          })\n     }\n     \n    // submit the form first it prevent to reload and method help to added new list into state.list from \n    // this.state.contents that stored in newList variable and after setState updtae value on contents to empty \n     submit = (e) =>{\n       e.preventDefault();\n        const newList = this.state.contents;\n        // all those .text and .key value comes from input that entered see in console.log and it get change depends on method \n        console.log(newList);\n              \n          if( newList.text !== \"\" ){\n          const newLists = [...this.state.list, newList];\n          this.setState({\n            list: newLists,\n            contents: {\n              text: '',\n              key: ''\n            }\n          })\n        }        \n    } \n      // delete list through filter method by finding key and setState list value to to FilterList variable \n    deleteList=(key)=>{\n        const FilterList = this.state.list.filter(filt => filt.key!==key);\n          this.setState({\n            list: FilterList,\n          })\n    }\n\n    // first newLists stored tha value of current this.state.list value then\n    //text and key indicate onChange specific list to edit by map method on all list\n    editList =(text, key)=>{\n      const newLists =this.state.list;\n        newLists.map((l) =>{\n        if(l.key===key){\n            l.text =text;\n        }\n        })\n        this.setState({\n          items: newLists,\n        })\n    }\n  \n\n  render(){\n  return (\n    <div className=\"App\">\n       \n          <form onSubmit={this.submit} className=\"form-container\"> \n          <div className=\"add-container\">\n            <input className=\"form-input\" type=\"text\"   onChange={this.handleInput} value={this.state.contents.text} placeholder=\"make yourself busy\" />\n            <button className=\"btn\"  type=\"submit\">Add</button> \n          </div> \n          {/* all those methos get passed to another Component by props */}\n          <ListItems \n           showList={this.state.list}\n           deleteList={this.deleteList} \n           editList={this.editList}\n          />\n\n          </form>\n    </div>\n  );\n}\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n\n    <App />,\n\n  document.getElementById('root')\n);"],"sourceRoot":""}